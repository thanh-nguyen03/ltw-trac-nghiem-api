// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  fullName    String
  password    String
  role        Role
  tokens      UserToken[]
  contests    Contest[]
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model UserToken {
  id            Int      @id @default(autoincrement())
  access_token  String
  refresh_token String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Contest {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  isFixTime   Boolean
  startTime   DateTime?
  endTime     DateTime?
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  questions   Question[]
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model Question {
  id        Int                @id @default(autoincrement())
  number    Int
  content   String
  score     Int                @default(1)
  contest   Contest            @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId Int
  options   QuestionOption[]
  answers   SubmissionAnswer[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
}

model QuestionOption {
  id         Int                @id @default(autoincrement())
  number     Int
  content    String
  isCorrect  Boolean
  question   Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  answers    SubmissionAnswer[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt
}

model Submission {
  id        Int                @id @default(autoincrement())
  totalTime Int?
  score     Int?
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  contest   Contest            @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId Int
  answers   SubmissionAnswer[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
}

model SubmissionAnswer {
  id           Int             @id @default(autoincrement())
  question     Question?       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int?
  option       QuestionOption? @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId     Int?
  submission   Submission?     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId Int?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  @@unique([questionId, submissionId])
}
